// <auto-generated />
using System;
using Beer2Beer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Beer2Beer.Data.Migrations
{
    [DbContext(typeof(Beer2BeerDbContext))]
    partial class Beer2BeerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Beer2Beer.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "No",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1476),
                            IsDeleted = false,
                            PostID = 1,
                            UserID = 1
                        },
                        new
                        {
                            ID = 2,
                            Content = "I think things are just fine now",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1851),
                            IsDeleted = false,
                            PostID = 1,
                            UserID = 2
                        },
                        new
                        {
                            ID = 3,
                            Content = "That beer is great",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1874),
                            IsDeleted = false,
                            PostID = 2,
                            UserID = 2
                        },
                        new
                        {
                            ID = 4,
                            Content = "Slaves dont drink beers",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1877),
                            IsDeleted = false,
                            PostID = 2,
                            UserID = 3
                        },
                        new
                        {
                            ID = 5,
                            Content = "Quality meme",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1880),
                            IsDeleted = false,
                            PostID = 3,
                            UserID = 1
                        },
                        new
                        {
                            ID = 6,
                            Content = "I would laugh but slaves never laught",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1883),
                            IsDeleted = false,
                            PostID = 3,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("Beer2Beer.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8192);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostDislikes")
                        .HasColumnType("int");

                    b.Property<int>("PostLikes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");

                    b.HasCheckConstraint("CK_Post_Title", "LEN([Title]) >= 16");

                    b.HasCheckConstraint("CK_Post_Content", "LEN([Content]) >= 32");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CommentsCount = 2,
                            Content = "I beg to be freeI beg to be free",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(2188),
                            IsDeleted = false,
                            PostDislikes = 2,
                            PostLikes = 0,
                            Title = "End Forum SlaveryEnd Forum Slavery",
                            UserID = 3
                        },
                        new
                        {
                            ID = 2,
                            CommentsCount = 2,
                            Content = "Have you tried itHave you tried it",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(2868),
                            IsDeleted = false,
                            PostDislikes = 1,
                            PostLikes = 1,
                            Title = "Carlsberg Beer OpinionsCarlsberg Beer Opinions",
                            UserID = 1
                        },
                        new
                        {
                            ID = 3,
                            CommentsCount = 2,
                            Content = "Dont laught too hardDont laught too hard",
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(2930),
                            IsDeleted = false,
                            PostDislikes = 0,
                            PostLikes = 2,
                            Title = "The best beer memeThe best beer meme",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Beer2Beer.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1012),
                            IsDeleted = false,
                            Name = "ShitPost"
                        },
                        new
                        {
                            ID = 2,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1202),
                            IsDeleted = false,
                            Name = "General"
                        },
                        new
                        {
                            ID = 3,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 704, DateTimeKind.Local).AddTicks(1215),
                            IsDeleted = false,
                            Name = "Admin Topics"
                        });
                });

            modelBuilder.Entity("Beer2Beer.Models.TagPost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("TagID");

                    b.ToTable("TagPosts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PostID = 1,
                            TagID = 1
                        },
                        new
                        {
                            ID = 2,
                            PostID = 1,
                            TagID = 2
                        },
                        new
                        {
                            ID = 3,
                            PostID = 2,
                            TagID = 1
                        },
                        new
                        {
                            ID = 4,
                            PostID = 2,
                            TagID = 2
                        },
                        new
                        {
                            ID = 5,
                            PostID = 3,
                            TagID = 3
                        });
                });

            modelBuilder.Entity("Beer2Beer.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AvatarImage")
                        .HasColumnType("varbinary(max)")
                        .HasMaxLength(1048576);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasCheckConstraint("CK_User_FirstName", "LEN([FirstName]) >= 4");

                    b.HasCheckConstraint("CK_User_LastName", "LEN([LastName]) >= 4");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 700, DateTimeKind.Local).AddTicks(9848),
                            Email = "beerKing@abv.bg",
                            FirstName = "Forum",
                            IsAdmin = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "King",
                            PasswordHash = "THeKingIsHere",
                            Username = "BeerKing"
                        },
                        new
                        {
                            ID = 4,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 703, DateTimeKind.Local).AddTicks(269),
                            Email = "beerEmperor@rome.com",
                            FirstName = "Emperor",
                            IsAdmin = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Beer",
                            PasswordHash = "YourEMperorHasReturnted",
                            Username = "BeerEmperor"
                        },
                        new
                        {
                            ID = 5,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 703, DateTimeKind.Local).AddTicks(348),
                            Email = "beerGod@heaven.universe",
                            FirstName = "GodGod",
                            IsAdmin = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Almighty",
                            PasswordHash = "BowToYourGod",
                            PhoneNumber = "0883778833",
                            Username = "BeerGod"
                        },
                        new
                        {
                            ID = 2,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 703, DateTimeKind.Local).AddTicks(479),
                            Email = "beerPeasent@mail.bg",
                            FirstName = "Beer",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Peasunt",
                            PasswordHash = "ThePeasentIsHere",
                            Username = "BeerPeasunt"
                        },
                        new
                        {
                            ID = 3,
                            CreatedOn = new DateTime(2022, 10, 14, 0, 48, 5, 703, DateTimeKind.Local).AddTicks(485),
                            Email = "beerSlave@mail.bg",
                            FirstName = "Beer",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Slave",
                            PasswordHash = "TheSlaveIsHere",
                            Username = "BeerSlave"
                        });
                });

            modelBuilder.Entity("Beer2Beer.Models.Comment", b =>
                {
                    b.HasOne("Beer2Beer.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beer2Beer.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Beer2Beer.Models.Post", b =>
                {
                    b.HasOne("Beer2Beer.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beer2Beer.Models.TagPost", b =>
                {
                    b.HasOne("Beer2Beer.Models.Post", "Post")
                        .WithMany("TagPosts")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beer2Beer.Models.Tag", "Tag")
                        .WithMany("TagPosts")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
